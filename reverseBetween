/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode A, int B, int C) {
        if(B==C) return A;
 
    ListNode prev = null;
    ListNode first = new ListNode(0);
    ListNode second = new ListNode(0);
 
    int i=0;
    ListNode p = A;
    while(p!=null){
        i++;
        if(i==B-1){
            prev = p;
        }
 
        if(i==B){
            first.next = p;
        }
 
        if(i==C){
            second.next = p.next;
            p.next = null;
        }
 
        p= p.next;
    }
    if(first.next == null)
        return A;
 
    // reverse list [m, n]    
    ListNode p1 = first.next;
    ListNode p2 = p1.next;
    p1.next = second.next;
 
    while(p1!=null && p2!=null){
        ListNode t = p2.next;
        p2.next = p1;
        p1 = p2;
        p2 = t;
    }
 
    //connect to previous part
    if(prev!=null)
        prev.next = p1;
    else
        return p1;
 
    return A;
    }
}

